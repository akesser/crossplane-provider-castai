/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GkeClusterObservation struct {

	// CAST AI credentials id for cluster
	CredentialsID *string `json:"credentialsId,omitempty" tf:"credentials_id,omitempty"`

	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect *bool `json:"deleteNodesOnDisconnect,omitempty" tf:"delete_nodes_on_disconnect,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// GKE cluster name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// GCP project id
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type GkeClusterParameters struct {

	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	// +kubebuilder:validation:Optional
	CredentialsJSONSecretRef *v1.SecretKeySelector `json:"credentialsJsonSecretRef,omitempty" tf:"-"`

	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	// +kubebuilder:validation:Optional
	DeleteNodesOnDisconnect *bool `json:"deleteNodesOnDisconnect,omitempty" tf:"delete_nodes_on_disconnect,omitempty"`

	// GCP cluster zone in case of zonal or region in case of regional cluster
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// GKE cluster name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// GCP project id
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// GkeClusterSpec defines the desired state of GkeCluster
type GkeClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GkeClusterParameters `json:"forProvider"`
}

// GkeClusterStatus defines the observed state of GkeCluster.
type GkeClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GkeClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GkeCluster is the Schema for the GkeClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type GkeCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   GkeClusterSpec   `json:"spec"`
	Status GkeClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GkeClusterList contains a list of GkeClusters
type GkeClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GkeCluster `json:"items"`
}

// Repository type metadata.
var (
	GkeCluster_Kind             = "GkeCluster"
	GkeCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GkeCluster_Kind}.String()
	GkeCluster_KindAPIVersion   = GkeCluster_Kind + "." + CRDGroupVersion.String()
	GkeCluster_GroupVersionKind = CRDGroupVersion.WithKind(GkeCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&GkeCluster{}, &GkeClusterList{})
}
