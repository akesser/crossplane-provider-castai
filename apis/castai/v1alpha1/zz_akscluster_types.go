/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AksClusterObservation struct {

	// Azure AD application ID that is created and used by CAST AI.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// CAST AI internal credentials ID
	CredentialsID *string `json:"credentialsId,omitempty" tf:"credentials_id,omitempty"`

	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect *bool `json:"deleteNodesOnDisconnect,omitempty" tf:"delete_nodes_on_disconnect,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// AKS cluster name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty" tf:"node_resource_group,omitempty"`

	// AKS cluster region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the Azure subscription.
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Azure AD tenant ID from the used subscription.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AksClusterParameters struct {

	// Azure AD application ID that is created and used by CAST AI.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Azure AD application password that will be used by CAST AI.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	// +kubebuilder:validation:Optional
	DeleteNodesOnDisconnect *bool `json:"deleteNodesOnDisconnect,omitempty" tf:"delete_nodes_on_disconnect,omitempty"`

	// AKS cluster name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Azure resource group in which nodes are and will be created.
	// +kubebuilder:validation:Optional
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty" tf:"node_resource_group,omitempty"`

	// AKS cluster region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of the Azure subscription.
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Azure AD tenant ID from the used subscription.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// AksClusterSpec defines the desired state of AksCluster
type AksClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AksClusterParameters `json:"forProvider"`
}

// AksClusterStatus defines the observed state of AksCluster.
type AksClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AksClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AksCluster is the Schema for the AksClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type AksCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientId)",message="clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientSecretSecretRef)",message="clientSecretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nodeResourceGroup)",message="nodeResourceGroup is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.subscriptionId)",message="subscriptionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.tenantId)",message="tenantId is a required parameter"
	Spec   AksClusterSpec   `json:"spec"`
	Status AksClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AksClusterList contains a list of AksClusters
type AksClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AksCluster `json:"items"`
}

// Repository type metadata.
var (
	AksCluster_Kind             = "AksCluster"
	AksCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AksCluster_Kind}.String()
	AksCluster_KindAPIVersion   = AksCluster_Kind + "." + CRDGroupVersion.String()
	AksCluster_GroupVersionKind = CRDGroupVersion.WithKind(AksCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&AksCluster{}, &AksClusterList{})
}
